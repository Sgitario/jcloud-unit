package io.jester.test;

import static io.jester.test.samples.ContainerSamples.QUARKUS_REST_LOCATION;
import static io.jester.test.samples.ContainerSamples.QUARKUS_STARTUP_EXPECTED_LOG;
import static io.jester.test.samples.ContainerSamples.SAMPLES_DEFAULT_PORT;
import static io.jester.test.samples.ContainerSamples.SAMPLES_DEFAULT_REST_PATH;
import static io.jester.test.samples.ContainerSamples.SAMPLES_DEFAULT_REST_PATH_OUTPUT;
import static org.hamcrest.Matchers.is;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.util.Optional;

import org.apache.http.HttpStatus;
import org.junit.jupiter.api.Tag;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.condition.DisabledIfSystemProperty;

import io.jester.api.GitRemoteProject;
import io.jester.api.Jester;
import io.jester.api.RestService;
import io.jester.utils.AwaitilityUtils;
import io.restassured.config.ConnectionConfig;
import io.restassured.config.HttpClientConfig;
import io.restassured.config.RestAssuredConfig;

@Tag("containers")
@Jester
public class GitRemoteProjectLifecycleIT {

    private static final String MY_PROPERTY = "my.property";
    private static final String MY_PROPERTY_EXPECTED_VALUE = "this is a custom property";

    @GitRemoteProject(repo = "https://github.com/Sgitario/jester", branch = "main", contextDir = QUARKUS_REST_LOCATION, buildCommands = {
            "mvn", "clean", "install", "-DskipTests",
            "-Dquarkus.container-image.build=false" }, dockerfile = QUARKUS_REST_LOCATION
                    + "/src/main/docker/Dockerfile.jvm", ports = SAMPLES_DEFAULT_PORT, expectedLog = QUARKUS_STARTUP_EXPECTED_LOG)
    static RestService greetings = new RestService().withProperty(MY_PROPERTY, MY_PROPERTY_EXPECTED_VALUE);

    @DisabledIfSystemProperty(named = "environment.ci", matches = "true", disabledReason = "In the GitHub runner, this test is flaky")
    @Test
    public void testServiceIsUpAndRunning() {
        thenServiceIsUpAndRunning();
    }

    @Test
    public void testContextId() {
        assertNotNull(greetings.getContextId(), "Context ID was not auto generated by the test framework");
    }

    @Test
    public void testServiceLogs() {
        assertFalse(greetings.getLogs().isEmpty(), "Logs is empty!");
        greetings.logs().assertContains(QUARKUS_STARTUP_EXPECTED_LOG);
        greetings.logs().assertDoesNotContain("This message should not be in the logs");
    }

    @Test
    public void testServiceProperties() {
        Optional<String> property = greetings.getProperty(MY_PROPERTY);
        assertTrue(property.isPresent(), "Property not found in service!");
        assertEquals(MY_PROPERTY_EXPECTED_VALUE, property.get(), "Property value not expected in service!");
    }

    @DisabledIfSystemProperty(named = "environment.ci", matches = "true", disabledReason = "In the GitHub runner, this test is flaky")
    @Test
    public void testStopAndStart() {
        greetings.stop();
        assertFalse(greetings.isRunning(), "Service was up and running!");
        greetings.start();
        assertTrue(greetings.isRunning(), "Service was not up and running!");
        thenServiceIsUpAndRunning();
    }

    private void thenServiceIsUpAndRunning() {
        AwaitilityUtils.untilAsserted(() -> greetings.given()
                .config(RestAssuredConfig.config()
                        .httpClient(HttpClientConfig.httpClientConfig().reuseHttpClientInstance())
                        .connectionConfig(ConnectionConfig.connectionConfig().closeIdleConnectionsAfterEachResponse()))
                .get(SAMPLES_DEFAULT_REST_PATH).then().statusCode(HttpStatus.SC_OK)
                .body(is(SAMPLES_DEFAULT_REST_PATH_OUTPUT)));
    }
}
