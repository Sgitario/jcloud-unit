name: "Pull Request Build"
on:
  - pull_request
jobs:
  validate-format:
    name: Validate format
    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK {{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
          cache: 'maven'
      - name: Build with Maven
        run: |
          mvn -V -B -s .github/mvn-settings.xml verify -Pframework -Dexamples -Dvalidate-format -DskipTests -DskipITs
  linux-build-jvm:
    name: PR - Linux - JVM build - Kind
    runs-on: ubuntu-latest
    needs: validate-format
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v3
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Kubernetes KinD Cluster
        uses: container-tools/kind-action@v2
        with:
          version: v0.11.1
          registry: true
      - name: Install OPM and Operator SDK tool
        uses: redhat-actions/openshift-tools-installer@v1
        with:
          source: "github"
          opm: "latest"
          operator-sdk: "latest"
      - name: Install Operator Lifecycle Manager and Operator SDK into Kind
        run: operator-sdk olm install
      - name: Install JDK {{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
          cache: 'maven'
      - name: Generate Images
        run: |
          cd images
          mvn -s ../.github/mvn-settings.xml clean install -Dsamples.container-image.registry=$KIND_REGISTRY -Dsamples.container-image.push=true
      - name: Build
        run: |
          mvn -s .github/mvn-settings.xml clean install -Pframework -Dexamples -Dcoverage \
            -Dsamples.container-image.registry=$KIND_REGISTRY \
            -Dts.services.all.image.registry=$KIND_REGISTRY \
            -Denvironment.ci=true \
            -Dexclude.kubernetes.tests=no
      - name: Zip Artifacts
        run: |
          zip -R artifacts-linux-jvm${{ matrix.java }}.zip '*-reports/*'
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ci-artifacts
          path: artifacts-linux-jvm${{ matrix.java }}.zip
  windows-build-jvm:
    name: PR - Windows - JVM build
    runs-on: windows-latest
    needs: validate-format
    strategy:
      matrix:
        java: [ 11 ]
    steps:
      - uses: actions/checkout@v3
      - name: Install JDK {{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
          check-latest: true
          cache: 'maven'
      - name: Build images
        shell: bash
        run: |
          cd images
          mvn -s ../.github/mvn-settings.xml clean install -Dquarkus.container-image.build=false
      - name: Build
        shell: bash
        run: |
          mvn -s .github/mvn-settings.xml clean install -Pframework -Dexamples -Dexclude.tests.with.tags=containers,native -Denvironment.ci=true
      - name: Zip Artifacts
        shell: bash
        if: failure()
        run: |
          # Disambiguate windows find from cygwin find
          /usr/bin/find . -name '*-reports/*' -type d | tar -czf artifacts-windows-jvm${{ matrix.java }}.tar -T -
      - name: Archive artifacts
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: ci-artifacts
          path: artifacts-windows-jvm${{ matrix.java }}.tar
  openshift:
    name: PR - Linux - JVM build - OCP
#    needs: cache
    # the action "manusa/actions-setup-openshift@v1.1.4" only works in ubuntu-20.04
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        openshift: [v3.11.0]
        java: [ 8 ]
    steps:
      - uses: actions/checkout@v3
      - name: Reclaim Disk Space
        run: .github/ci-prerequisites.sh
      - name: Setup OpenShift
        uses: manusa/actions-setup-openshift@v1.1.4
        with:
          oc version: ${{ matrix.openshift }}
          dns ip: 1.1.1.1
#          enable: 'service-catalog,registry,-web-console,-router,-persistent-volumes,-sample-templates'
          enable: 'service-catalog,-registry,-web-console,-router,-persistent-volumes,-sample-templates'
      - name: Get OCP cluster information
        id: ocp_cluster_information
        run: |
          oc whoami
          oc expose service docker-registry -n default
          oc get service docker-registry --template='{{.spec}}'
          oc get service docker-registry --template='{{.spec.clusterIP}}'
          echo "ocp_registry_address=$(oc get service docker-registry --template='{{.spec.clusterIP}}:{{(index .spec.ports 0).port}}')" >> $GITHUB_ENV
#          oc adm registry --service-account=registry --images='registry.access.redhat.com/openshift3/ose-${component}:${version}'
#          oc create route passthrough --service registry-console --port registry-console -n default
#          export OCP_REGISTRY_ADDRESS=$(oc get service docker-registry --template='{{.spec.clusterIP}}')
#          echo "::set-output name=registry_address::${OCP_REGISTRY_ADDRESS}"
#          echo ${REGISTRY_OPENSHIFT_SERVER_ADDR}
#          oc get nodes
#          oc create route passthrough --service registry-console --port registry-console -n default
#          oc get projects
#          oc api-resources
#          oc adm registry --service-account=registry --images='registry.access.redhat.com/openshift3/ose-${component}:${version}'
#          oc adm --help
#          oc adm registry
#          oc api-resources | grep 'servicecatalog.k8s.io'
#          oc logs dc/docker-registry
#          oc patch configs.imageregistry.operator.openshift.io/cluster --patch '{"spec":{"defaultRoute":true}}' --type=merge
#          oc login -u admin -p admin
#          oc get nodes
#          oc get projects
#        outputs:
#          registry_address: ${{ steps.ocp_cluster_information.outputs.registry_address }}
#      - name: Deploy OCP image registry
#        run: oc adm registry --service-account=registry --images='registry.redhat.io/openshift3/ose-${component}:${version}'
      #          github token: ${{ secrets.GITHUB_TOKEN }}
#      - name: Install OPM and Operator SDK tool
#        uses: redhat-actions/openshift-tools-installer@v1
#        with:
#          source: "github"
#          opm: "latest"
#          operator-sdk: "latest"
#      - name: Install Operator Lifecycle Manager and Operator SDK into Kind
#        run: operator-sdk olm install
      - name: Install JDK {{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'
      # 127.0.0.1:5000 -
      # docker-registry.default.svc.cluster.local:5000 - Get "https://docker-registry.default.svc.cluster.local:5000/v2/": dial tcp: lookup docker-registry.default.svc.cluster.local: Temporary failure in name resolution
      # docker-registry.default.svc:5000 - Get "https://docker-registry.default.svc:5000/v2/": dial tcp: lookup docker-registry.default.svc: no such host
      # image-registry.openshift-image-registry.svc:5000 - Get "https://image-registry.openshift-image-registry.svc:5000/v2/": dial tcp: lookup image-registry.openshift-image-registry.svc: no such host
      # REGISTRY_OPENSHIFT_SERVER_ADDR -
      # env.ocp_registry_address - Get "http://172.30.183.66:5000/v2/": dial tcp 172.30.183.66:5000: connect: connection refused
      - name: Generate Images
#        needs: first-job
        run: |
          echo "${{ env.ocp_registry_address }}"
          cd images
          mvn -s ../.github/mvn-settings.xml clean install -Dsamples.container-image.push=true \
            -Dsamples.container-image.registry=${{ env.ocp_registry_address }} \
            -Dts.services.all.image.registry=${{ env.ocp_registry_address }} \
      - name: Build
        run: |
          mvn -s .github/mvn-settings.xml clean install -Pframework -Dexamples -Dcoverage \
            -Denvironment.ci=true \
            -Dexclude.openshift.tests=no
      - name: Zip Artifacts
        run: |
          zip -R artifacts-linux-jvm${{ matrix.java }}.zip '*-reports/*'
      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ci-artifacts
          path: artifacts-linux-jvm${{ matrix.java }}.zip
      - name: Zip Artifacts
        if: failure()
        run: |
          zip -R manifests-ocp-jvm${{ matrix.java }}.zip 'classes/META-INF/dekorate/*'
      - uses: actions/upload-artifact@v1
        if: failure()
        with:
          name: ci-manifests
          path: manifests-ocp-jvm${{ matrix.java }}.zip